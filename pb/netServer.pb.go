// Code generated by protoc-gen-go. DO NOT EDIT.
// source: netServer.proto

/*
Package netConfigServe is a generated protocol buffer package.

It is generated from these files:
	netServer.proto

It has these top-level messages:
	PortParameter
	LinkParameter
	Links
	Ports
	NodeInfo
*/
package netConfigServe

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PortType int32

const (
	PortType_SENDPORT PortType = 0
	PortType_RECVPORT PortType = 1
	PortType_DEPIPORT PortType = 2
)

var PortType_name = map[int32]string{
	0: "SENDPORT",
	1: "RECVPORT",
	2: "DEPIPORT",
}
var PortType_value = map[string]int32{
	"SENDPORT": 0,
	"RECVPORT": 1,
	"DEPIPORT": 2,
}

func (x PortType) String() string {
	return proto.EnumName(PortType_name, int32(x))
}
func (PortType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PortParameter struct {
	RioId          int32    `protobuf:"varint,1,opt,name=rioId" json:"rioId,omitempty"`
	AppName        string   `protobuf:"bytes,2,opt,name=appName" json:"appName,omitempty"`
	PortName       string   `protobuf:"bytes,3,opt,name=portName" json:"portName,omitempty"`
	SlotSize       int32    `protobuf:"varint,4,opt,name=slotSize" json:"slotSize,omitempty"`
	Type           PortType `protobuf:"varint,5,opt,name=type,enum=netConfigServe.PortType" json:"type,omitempty"`
	RemoteAppName  string   `protobuf:"bytes,6,opt,name=remoteAppName" json:"remoteAppName,omitempty"`
	RemotePortName string   `protobuf:"bytes,7,opt,name=remotePortName" json:"remotePortName,omitempty"`
}

func (m *PortParameter) Reset()                    { *m = PortParameter{} }
func (m *PortParameter) String() string            { return proto.CompactTextString(m) }
func (*PortParameter) ProtoMessage()               {}
func (*PortParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PortParameter) GetRioId() int32 {
	if m != nil {
		return m.RioId
	}
	return 0
}

func (m *PortParameter) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *PortParameter) GetPortName() string {
	if m != nil {
		return m.PortName
	}
	return ""
}

func (m *PortParameter) GetSlotSize() int32 {
	if m != nil {
		return m.SlotSize
	}
	return 0
}

func (m *PortParameter) GetType() PortType {
	if m != nil {
		return m.Type
	}
	return PortType_SENDPORT
}

func (m *PortParameter) GetRemoteAppName() string {
	if m != nil {
		return m.RemoteAppName
	}
	return ""
}

func (m *PortParameter) GetRemotePortName() string {
	if m != nil {
		return m.RemotePortName
	}
	return ""
}

type LinkParameter struct {
	SendPort  *PortParameter `protobuf:"bytes,1,opt,name=sendPort" json:"sendPort,omitempty"`
	RecvPort  *PortParameter `protobuf:"bytes,2,opt,name=recvPort" json:"recvPort,omitempty"`
	LinkState uint32         `protobuf:"varint,3,opt,name=linkState" json:"linkState,omitempty"`
}

func (m *LinkParameter) Reset()                    { *m = LinkParameter{} }
func (m *LinkParameter) String() string            { return proto.CompactTextString(m) }
func (*LinkParameter) ProtoMessage()               {}
func (*LinkParameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LinkParameter) GetSendPort() *PortParameter {
	if m != nil {
		return m.SendPort
	}
	return nil
}

func (m *LinkParameter) GetRecvPort() *PortParameter {
	if m != nil {
		return m.RecvPort
	}
	return nil
}

func (m *LinkParameter) GetLinkState() uint32 {
	if m != nil {
		return m.LinkState
	}
	return 0
}

type Links struct {
	Lp []*LinkParameter `protobuf:"bytes,1,rep,name=lp" json:"lp,omitempty"`
}

func (m *Links) Reset()                    { *m = Links{} }
func (m *Links) String() string            { return proto.CompactTextString(m) }
func (*Links) ProtoMessage()               {}
func (*Links) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Links) GetLp() []*LinkParameter {
	if m != nil {
		return m.Lp
	}
	return nil
}

type Ports struct {
	Pp []*PortParameter `protobuf:"bytes,1,rep,name=pp" json:"pp,omitempty"`
}

func (m *Ports) Reset()                    { *m = Ports{} }
func (m *Ports) String() string            { return proto.CompactTextString(m) }
func (*Ports) ProtoMessage()               {}
func (*Ports) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Ports) GetPp() []*PortParameter {
	if m != nil {
		return m.Pp
	}
	return nil
}

type NodeInfo struct {
	RioId int32 `protobuf:"varint,1,opt,name=rioId" json:"rioId,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NodeInfo) GetRioId() int32 {
	if m != nil {
		return m.RioId
	}
	return 0
}

func init() {
	proto.RegisterType((*PortParameter)(nil), "netConfigServe.PortParameter")
	proto.RegisterType((*LinkParameter)(nil), "netConfigServe.LinkParameter")
	proto.RegisterType((*Links)(nil), "netConfigServe.Links")
	proto.RegisterType((*Ports)(nil), "netConfigServe.Ports")
	proto.RegisterType((*NodeInfo)(nil), "netConfigServe.NodeInfo")
	proto.RegisterEnum("netConfigServe.PortType", PortType_name, PortType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetConfig service

type NetConfigClient interface {
	RequestConfigLink(ctx context.Context, in *PortParameter, opts ...grpc.CallOption) (*PortParameter, error)
	QueryAllLinks(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Links, error)
}

type netConfigClient struct {
	cc *grpc.ClientConn
}

func NewNetConfigClient(cc *grpc.ClientConn) NetConfigClient {
	return &netConfigClient{cc}
}

func (c *netConfigClient) RequestConfigLink(ctx context.Context, in *PortParameter, opts ...grpc.CallOption) (*PortParameter, error) {
	out := new(PortParameter)
	err := grpc.Invoke(ctx, "/netConfigServe.NetConfig/RequestConfigLink", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netConfigClient) QueryAllLinks(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*Links, error) {
	out := new(Links)
	err := grpc.Invoke(ctx, "/netConfigServe.NetConfig/QueryAllLinks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetConfig service

type NetConfigServer interface {
	RequestConfigLink(context.Context, *PortParameter) (*PortParameter, error)
	QueryAllLinks(context.Context, *NodeInfo) (*Links, error)
}

func RegisterNetConfigServer(s *grpc.Server, srv NetConfigServer) {
	s.RegisterService(&_NetConfig_serviceDesc, srv)
}

func _NetConfig_RequestConfigLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetConfigServer).RequestConfigLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netConfigServe.NetConfig/RequestConfigLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetConfigServer).RequestConfigLink(ctx, req.(*PortParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetConfig_QueryAllLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetConfigServer).QueryAllLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netConfigServe.NetConfig/QueryAllLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetConfigServer).QueryAllLinks(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netConfigServe.NetConfig",
	HandlerType: (*NetConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestConfigLink",
			Handler:    _NetConfig_RequestConfigLink_Handler,
		},
		{
			MethodName: "QueryAllLinks",
			Handler:    _NetConfig_QueryAllLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netServer.proto",
}

func init() { proto.RegisterFile("netServer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x51, 0x6e, 0xd3, 0x40,
	0x10, 0xed, 0xba, 0x4d, 0xeb, 0x4c, 0x71, 0x80, 0x05, 0x24, 0xcb, 0x2a, 0x92, 0x65, 0x21, 0x14,
	0x21, 0x88, 0xa5, 0x80, 0x90, 0xf8, 0xac, 0xda, 0x7c, 0x44, 0x42, 0xc6, 0xac, 0x0b, 0xff, 0x4b,
	0x33, 0x0d, 0x56, 0x9d, 0xdd, 0x65, 0xbd, 0xad, 0x14, 0x3e, 0xb9, 0x02, 0x47, 0xe0, 0x10, 0x1c,
	0x84, 0x2b, 0x70, 0x03, 0x2e, 0x80, 0x76, 0x5d, 0xa7, 0x72, 0x09, 0x51, 0x3f, 0xdf, 0x9b, 0xf7,
	0xc6, 0x6f, 0x66, 0xd6, 0x70, 0x57, 0xa0, 0x29, 0x50, 0x5f, 0xa2, 0x1e, 0x29, 0x2d, 0x8d, 0xa4,
	0x03, 0x81, 0xe6, 0x48, 0x8a, 0xb3, 0x72, 0xee, 0xe8, 0xe8, 0x60, 0x2e, 0xe5, 0xbc, 0xc2, 0x94,
	0xab, 0x32, 0xe5, 0x42, 0x48, 0xc3, 0x4d, 0x29, 0x45, 0xdd, 0xa8, 0x93, 0x3f, 0x04, 0x82, 0x5c,
	0x6a, 0x93, 0x73, 0xcd, 0x17, 0x68, 0x50, 0xd3, 0x87, 0xd0, 0xd3, 0xa5, 0x9c, 0xce, 0x42, 0x12,
	0x93, 0x61, 0x8f, 0x35, 0x80, 0x86, 0xb0, 0xc7, 0x95, 0xca, 0xf8, 0x02, 0x43, 0x2f, 0x26, 0xc3,
	0x3e, 0x6b, 0x21, 0x8d, 0xc0, 0x57, 0x52, 0x1b, 0x57, 0xda, 0x76, 0xa5, 0x15, 0xb6, 0xb5, 0xba,
	0x92, 0xa6, 0x28, 0xbf, 0x62, 0xb8, 0xe3, 0xda, 0xad, 0x30, 0x7d, 0x0e, 0x3b, 0x66, 0xa9, 0x30,
	0xec, 0xc5, 0x64, 0x38, 0x18, 0x87, 0xa3, 0x6e, 0xec, 0x91, 0xed, 0x71, 0xb2, 0x54, 0xc8, 0x9c,
	0x8a, 0x3e, 0x81, 0x40, 0xe3, 0x42, 0x1a, 0x3c, 0xbc, 0x4a, 0xb1, 0xeb, 0x3e, 0xd5, 0x25, 0xe9,
	0x53, 0x18, 0x34, 0x44, 0xde, 0x26, 0xda, 0x73, 0xb2, 0x1b, 0x6c, 0xf2, 0x83, 0x40, 0xf0, 0xb6,
	0x14, 0xe7, 0xd7, 0x53, 0xbf, 0x01, 0xbf, 0x46, 0x31, 0xb3, 0x0a, 0x37, 0xf8, 0xfe, 0xf8, 0xf1,
	0xcd, 0x44, 0x9d, 0x35, 0xb1, 0x95, 0xdc, 0x5a, 0x35, 0x9e, 0x5e, 0x3a, 0xab, 0x77, 0x2b, 0x6b,
	0x2b, 0xa7, 0x07, 0xd0, 0xaf, 0x4a, 0x71, 0x5e, 0x18, 0x6e, 0x9a, 0xe5, 0x05, 0xec, 0x9a, 0x48,
	0x5e, 0x43, 0xcf, 0x86, 0xac, 0xe9, 0x0b, 0xf0, 0x2a, 0x15, 0x92, 0x78, 0x7b, 0x5d, 0xef, 0xce,
	0x1c, 0xcc, 0xab, 0x94, 0xf5, 0xd9, 0xee, 0xce, 0xa7, 0xfe, 0xeb, 0xeb, 0x66, 0xf2, 0x94, 0x4a,
	0x62, 0xf0, 0x33, 0x39, 0xc3, 0xa9, 0x38, 0x93, 0xeb, 0x5f, 0xc1, 0xb3, 0x57, 0xcd, 0xad, 0xed,
	0x5d, 0xe8, 0x1d, 0xf0, 0x8b, 0x49, 0x76, 0x9c, 0xbf, 0x63, 0x27, 0xf7, 0xb6, 0x2c, 0x62, 0x93,
	0xa3, 0x8f, 0x0e, 0x11, 0x8b, 0x8e, 0x27, 0xf9, 0xd4, 0x21, 0x6f, 0xfc, 0x93, 0x40, 0x3f, 0x6b,
	0x3f, 0x4e, 0x0b, 0xb8, 0xcf, 0xf0, 0xcb, 0x05, 0xd6, 0x57, 0x84, 0xcd, 0x4f, 0x37, 0xa7, 0x8b,
	0x36, 0x97, 0x93, 0x2d, 0xfa, 0x01, 0x82, 0xf7, 0x17, 0xa8, 0x97, 0x87, 0x55, 0xd5, 0xac, 0xec,
	0x9f, 0xf7, 0xd4, 0x4e, 0x16, 0x3d, 0x5a, 0xb7, 0xc0, 0x3a, 0x79, 0xf0, 0xed, 0xd7, 0xef, 0xef,
	0x5e, 0x40, 0xf7, 0x53, 0x7b, 0x80, 0x3a, 0xc5, 0xd3, 0xcf, 0xf2, 0xd3, 0xae, 0xfb, 0x49, 0x5e,
	0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x18, 0xb5, 0xda, 0x65, 0x03, 0x00, 0x00,
}
